/*
*  ml_module.cpp
*  This file is part of NEST.
*
*  Copyright (C) 2004 The NEST Initiative
*
*  NEST is free software: you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation, either version 2 of the License, or
*  (at your option) any later version.
*
*  NEST is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  You should have received a copy of the GNU General Public License
*  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
*
*/

#include "ml_module.h"

// Generated includes:
#include "config.h"

// include headers with your own stuff
#include "pif_psc_alpha.h"
#include "izhik_cond_exp.h"
#include "my_aeif_cond_exp.h"
#include "poisson_generator_periodic.h"
#include "my_poisson_generator.h"
#include "poisson_generator_dynamic.h"
#include "drop_odd_spike_connection.h"
#include "step_pattern_builder.h"

// Includes from nestkernel:
#include "connection_manager_impl.h" //new
#include "connector_model_impl.h"
#include "dynamicloader.h"
#include "exceptions.h"
#include "genericmodel.h"
#include "genericmodel_impl.h" //new
#include "kernel_manager.h" //new
#include "model.h"
#include "model_manager_impl.h" //new
#include "nestmodule.h"
#include "target_identifier.h"

// Includes from sli:
#include "booldatum.h"
#include "integerdatum.h"
#include "sliexceptions.h"
#include "tokenarray.h"

//#include "network.h" //removed
//#include "model.h"
//#include "dynamicloader.h"
//#include "genericmodel.h"
//#include "booldatum.h"
//#include "integerdatum.h"
//#include "tokenarray.h"
//#include "exceptions.h"
//#include "sliexceptions.h"
//#include "nestmodule.h"
//#include "connector_model_impl.h"
//#include "target_identifier.h"





// -- Interface to dynamic module loader ---------------------------------------

/*
* There are three scenarios, in which MyModule can be loaded by NEST:
*
* 1) When loading your module with `Install`, the dynamic module loader must
* be able to find your module. You make the module known to the loader by
* defining an instance of your module class in global scope. (LTX_MODULE is
* defined) This instance must have the name
*
* <modulename>_LTX_mod
*
* The dynamicloader can then load modulename and search for symbol "mod" in it.
*
* 2) When you link the library dynamically with NEST during compilation, a new
* object has to be created. In the constructor the DynamicLoaderModule will
* register your module. (LINKED_MODULE is defined)
*
* 3) When you link the library statically with NEST during compilation, the
* registration will take place in the file `static_modules.h`, which is
* generated by cmake.
*/
#if defined( LTX_MODULE ) | defined( LINKED_MODULE )
mynest::Ml_Module ml_module_LTX_mod;
#endif
// -- DynModule functions ------------------------------------------------------

mynest::Ml_Module::Ml_Module()
{
#ifdef LINKED_MODULE
 // register this module at the dynamic loader
 // this is needed to allow for linking in this module at compile time
 // all registered modules will be initialized by the main app's dynamic loader
 nest::DynamicLoaderModule::registerLinkedModule(this);
#endif     
}

mynest::Ml_Module::~Ml_Module()
{
}

const std::string
mynest::Ml_Module::name(void) const
{
 return std::string("Ml NEST Module"); // Return name of the module
}

const std::string
mynest::Ml_Module::commandstring(void) const
{
 // Instruct the interpreter to load mymodule-init.sli
 return std::string( "(ml_module) run");
}

//-------------------------------------------------------------------------------------

void
mynest::Ml_Module::init(SLIInterpreter* i )
{
/* Register a neuron or device model.
 Give node type as template argument and the name as second argument.
*/
nest::kernel().model_manager.register_node_model<pif_psc_alpha>(
 "pif_psc_alpha");

nest::kernel().model_manager.register_node_model<izhik_cond_exp>(
"izhik_cond_exp");

nest::kernel().model_manager.register_node_model<my_aeif_cond_exp>(
"my_aeif_cond_exp");

nest::kernel().model_manager.register_node_model<poisson_generator_periodic>(
 "poisson_generator_periodic");

nest::kernel().model_manager.register_node_model<poisson_generator_dynamic>(
"poisson_generator_dynamic");

nest::kernel().model_manager.register_node_model<my_poisson_generator>(
 "my_poisson_generator");

/* Register a synapse type.
 Give synapse type as template argument and the name as second argument.

 There are two choices for the template argument:
     - nest::TargetIdentifierPtrRport
     - nest::TargetIdentifierIndex
 The first is the standard and you should usually stick to it.
 nest::TargetIdentifierIndex reduces the memory requirement of synapses
 even further, but limits the number of available rports. Please see
 Kunkel et al, Front Neurofinfom 8:78 (2014), Sec 3.3.2, for details.
*/
nest::kernel()
.model_manager.register_connection_model< DropOddSpikeConnection< nest::
    TargetIdentifierPtrRport > >( "drop_odd_synapse" );

// Register connection rule.
nest::kernel().connection_manager.register_conn_builder< StepPatternBuilder >(
"step_pattern" );
//    nest::register_prototype_connection<BCPNNConnection>(nest::NestModule::get_network(),
//                                                       "bcpnn_synapse");
/*    nest::register_prototype_connection<BCPNNDopaConnection>(nest::NestModule::get_network(),
                                                   "bcpnn_dopamine_synapse");*/

//    nest::register_prototype_connection_commonproperties <BCPNNDopaConnection,
//                                                    BCPNNDopaCommonProperties
//                                                   > (nest::NestModule::get_network(),
//                                                		   "bcpnn_dopamine_synapse");

}  // Ml_Module::init()


